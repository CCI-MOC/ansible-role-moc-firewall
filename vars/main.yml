fw_services:
  ssh_virt:
    filter_INPUT:
      - srcip: 192.168.122.1
        dport: 22
  ssh_global:
    filter_INPUT:
      - dport: 22
  ssh_moc:
    filter_INPUT:
      - srcip: 129.10.5.0/24
        dport: 22
      - srcip: 192.12.185.0/24
        dport: 22
      - srcip: 128.31.28.0/24
        dport: 22
  all_internal_nets:
    filter_INPUT:
      - srcip: 10.0.0.0/8
        proto: all
      - srcip: 172.16.0.0/12
        proto: all
      - srcip: 192.168.0.0/16
        proto: all

  ssh_ratelimit:
    filter_INPUT_raw:
      - >-
        -p tcp --dport 22
        -m state --state NEW
        -m recent --name SSH --update --seconds 60 --hitcount 8
        -j DROP
      - >-
        -p tcp --dport 22
        -m state --state NEW
        -m recent --name SSH --set
        -j ACCEPT
  smtp:
    filter_INPUT:
      - dport: 25
      - dport: 465
  imap:
    filter_INPUT:
      - dport: 993
  web:
    filter_INPUT:
      - dport: 80
      - dport: 443
  web_moc:
    filter_INPUT:
      - srcip: 129.10.5.0/24
        dport: 443
      - srcip: 192.12.185.0/24
        dport: 443
      - srcip: 128.31.28.0/24
        dport: 443
      - srcip: 129.10.5.0/24
        dport: 80
      - srcip: 192.12.185.0/24
        dport: 80
      - srcip: 128.31.28.0/24
        dport: 80
  domain:
    filter_INPUT:
      - proto: tcp
        dport: 53
      - proto: udp
        dport: 53
  zabbix:
    filter_INPUT:
      - srcip: 129.10.5.132
        dport: 10050
  all_from_sso:
    filter_INPUT:
      - srcip: 128.31.28.11
        proto: all
      - srcip: 128.31.28.12
        proto: all
      - srcip: 128.31.28.13
        proto: all

  # For hosts running containerized services, but MySQL on the host, we need
  # to permit connections from "everywhere that is not the primary interface"
  # (because we don't know in advance the source ip or even the cidr range of
  # the containerized services).
  mysql_local:
    filter_INPUT_raw:
      - >-
        -p tcp --dport 3306 ! -i {{ fw_primary_interface }} -j ACCEPT
